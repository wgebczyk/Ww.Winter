using System.Linq;
using System.Text;
using Ww.Winter.Generator.Model;

namespace Ww.Winter.Generator.QueryableFilters;

public static class QueryableFilterRenderer
{
    private static readonly string[] Header =
    [
        "//---------------------------------------------------------------------------------------------------",
        "// <auto-generated>",
        "//     This code was generated by the Ww.Winter source generator.",
        "//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
        "// </auto-generated>",
        "//---------------------------------------------------------------------------------------------------",
    ];

    public static (string Content, string HintName) Render(QueryableFilterToGenerate toGenerate)
    {
        var filter = toGenerate.Filter;
        var entity = toGenerate.Entity;
        var propertyParser = new FilterPropertyIdentifierParser();

        var sb = new StringBuilder(4 * 1024);
        foreach (var header in Header)
        {
            sb.AppendLine(header);
        }
        sb.AppendLine();
        sb.AppendLine($"using System.Linq;");
        sb.AppendLine($"using {entity.Type.Namespace};");
        sb.AppendLine();
        sb.AppendLine($"#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {filter.Type.Namespace};");
        sb.AppendLine();
        sb.AppendLine($"public partial class {filter.Type.Name}");
        sb.AppendLine($"{{");

        sb.AppendLine($"    public IQueryable<{entity.Type.Name}> ApplyFilter(IQueryable<{entity.Type.Name}> query)");
        sb.AppendLine($"    {{");
        foreach (var property in filter.Properties)
        {
            if (!propertyParser.TryParse(entity, property.Name, out var filterProperty))
            {
                sb.AppendLine($"        // WARN: Unable to process filter property '{property.Name}' for entity '{entity.Type.Name}'");
                continue;
            }
            var entityProperty = filterProperty.Properties.Single().Name;

            sb.AppendLine($"        if (this.{property.Name} is not null)");
            sb.AppendLine($"        {{");
            switch (filterProperty!.Comparison)
            {
                case FilterComparison.Equals:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty} == this.{property.Name});");
                    break;
                case FilterComparison.NotEquals:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty} != this.{property.Name});");
                    break;
                case FilterComparison.GreaterThan:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty} > this.{property.Name});");
                    break;
                case FilterComparison.GreaterThanOrEqual:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty} >= this.{property.Name});");
                    break;
                case FilterComparison.LessThan:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty} < this.{property.Name});");
                    break;
                case FilterComparison.LessThanOrEqual:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty} <= this.{property.Name});");
                    break;
                case FilterComparison.Contains:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.Contains(this.{property.Name}));");
                    break;
                case FilterComparison.StartsWith:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.StartsWith(this.{property.Name}));");
                    break;
                case FilterComparison.EndsWith:
                    sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.EndsWith(this.{property.Name}));");
                    break;
            }
            sb.AppendLine($"        }}");
        }
        sb.AppendLine();
        sb.AppendLine($"        return query;");
        sb.AppendLine($"    }}");
        sb.AppendLine();

        sb.AppendLine($"}}");

        var content = sb.ToString();

        var filename = Helpers.ToSafeFileName(entity.Type.FullyQualifiedName, "QueryableFilters");
        return (content, filename);
    }
}