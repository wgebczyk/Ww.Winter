using Microsoft.CodeAnalysis;
using System.Linq;
using System.Text;

namespace Ww.Winter.Generator.QueryFilters;

public static class QueryFilterRenderer
{
    private static readonly string[] Header =
    [
        "//---------------------------------------------------------------------------------------------------",
        "// <auto-generated>",
        "//     This code was generated by the Ww.Winter source generator.",
        "//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
        "// </auto-generated>",
        "//---------------------------------------------------------------------------------------------------",
    ];

    public static (string Content, string HintName) Render(QueryFilterToGenerate toGenerate)
    {
        var sb = new StringBuilder(4 * 1024);
        foreach (var header in Header)
        {
            sb.AppendLine(header);
        }
        sb.AppendLine();
        sb.AppendLine($"using System.Linq;");
        sb.AppendLine();
        sb.AppendLine($"#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {toGenerate.OwnedBy.Namespace};");
        sb.AppendLine();
        sb.AppendLine($"public static partial class {toGenerate.OwnedBy.TypeName}");
        sb.AppendLine($"{{");
        foreach (var queryFilter in toGenerate.QueryFilters)
        {
            var entityName = queryFilter.Entity.TypeName;
            var filterName = queryFilter.Filter.TypeName;
            sb.AppendLine($"    public static IQueryable<{entityName}> ApplyFilter(");
            sb.AppendLine($"        this IQueryable<{entityName}> query,");
            sb.AppendLine($"        {filterName} filter)");
            sb.AppendLine($"    {{");
            foreach (var property in queryFilter.Filter.Properties)
            {
                var filterProperty = new QueryFilterPropertyIdentifierParser().Parse(queryFilter.Entity, property);
                if (filterProperty is null)
                {
                    sb.AppendLine($"        // WARN: Unable to process filter property '{property.PropertyName}' for entity '{queryFilter.Entity.TypeName}'");
                    continue;
                }
                var entityProperty = filterProperty.Property.PropertyName;

                sb.AppendLine($"        if (filter.{property.PropertyName} is not null)");
                sb.AppendLine($"        {{");
                switch (filterProperty!.Comparison)
                {
                    case FilterComparison.Equals:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} == filter.{property.PropertyName});");
                        break;
                    case FilterComparison.NotEquals:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} != filter.{property.PropertyName});");
                        break;
                    case FilterComparison.GreaterThan:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} > filter.{property.PropertyName});");
                        break;
                    case FilterComparison.GreaterThanOrEqual:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} >= filter.{property.PropertyName});");
                        break;
                    case FilterComparison.LessThan:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} < filter.{property.PropertyName});");
                        break;
                    case FilterComparison.LessThanOrEqual:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} <= filter.{property.PropertyName});");
                        break;
                    case FilterComparison.Contains:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.Contains(filter.{property.PropertyName}));");
                        break;
                    case FilterComparison.StartsWith:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.StartsWith(filter.{property.PropertyName}));");
                        break;
                    case FilterComparison.EndsWith:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.EndsWith(filter.{property.PropertyName}));");
                        break;
                }
                sb.AppendLine($"        }}");
            }
            sb.AppendLine();
            sb.AppendLine($"        return query;");
            sb.AppendLine($"    }}");
            sb.AppendLine();
        }
        sb.AppendLine($"}}");

        var content = sb.ToString();

        var filename = Helpers.ToSafeFileName(toGenerate.OwnedBy.FullyQualifiedTypeName, "QueryFilters");
        return (content, filename);
    }
}