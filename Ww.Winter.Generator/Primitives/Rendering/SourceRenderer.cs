using System.IO;
using System.Linq;
using System.Text;

namespace Ww.Winter.Generator.Primitives;

public abstract class SourceRenderer
{
    private static readonly string[] Header =
    [
        "//---------------------------------------------------------------------------------------------------",
        "// <auto-generated>",
        "//     This code was generated by the Ww.Winter source generator.",
        "//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
        "// </auto-generated>",
        "//---------------------------------------------------------------------------------------------------",
    ];
    private static readonly string[] Indentation = Enumerable.Range(0, 10)
        .Select(i => new string(' ', i * 4))
        .ToArray();
    private readonly StringBuilder _builder;
    private readonly TextWriter _writer;
    private int _indentLevel;

    protected SourceRenderer()
    {
        _builder = new StringBuilder(4 * 1024);
        _writer = new StringWriter(_builder);
        foreach (var header in Header)
        {
            _writer.WriteLine(header);
        }
        _writer.WriteLine();
    }

    protected string GetSource()
    {
        return _builder.ToString();
    }

    protected void IncreaseIndent()
    {
        _indentLevel++;
    }
    protected void DecreaseIndent()
    {
        _indentLevel--;
    }

    protected void WriteLine()
    {
        _writer.WriteLine();
    }
    protected void WriteLine(string line)
    {
        _writer.WriteLine($"{Indentation[_indentLevel]}{line}");
    }

    protected void WriteOpenBracket()
    {
        _writer.WriteLine($"{Indentation[_indentLevel++]}{{");
    }
    protected void WriteCloseBracket()
    {
        _writer.WriteLine($"{Indentation[--_indentLevel]}}}");
    }

    protected void WriteStartClass(TypeModel ownedBy)
    {
        WriteLine($"namespace {ownedBy.Namespace};");
        WriteLine();
        foreach (var parentType in ownedBy.ParentTypes)
        {
            WriteLine($"partial {(parentType.IsRecord ? "record" : "class")} {parentType.Name}");
            WriteOpenBracket();
        }
        WriteLine($"partial {(ownedBy.IsRecord ? "record" : "class")} {ownedBy.Name}");
        WriteOpenBracket();
    }

    protected void WriteEndClass(TypeModel ownedBy)
    {
        WriteCloseBracket();
        foreach (var _ in ownedBy.ParentTypes)
        {
            WriteCloseBracket();
        }
    }

    protected static string ToSafeFileName(string typeName, string generatorName)
    {
        return $"{typeName}_{generatorName}.g.cs".Replace('<', '_')
            .Replace('>', '_')
            .Replace(',', '.')
            .Replace(' ', '_');
    }
}
