using System.Text;

namespace Ww.Winter.Generator.BasicQueries;

public static class BasicQueryRenderer
{
    private static readonly string[] Header =
    [
        "//---------------------------------------------------------------------------------------------------",
        "// <auto-generated>",
        "//     This code was generated by the Ww.Winter source generator.",
        "//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
        "// </auto-generated>",
        "//---------------------------------------------------------------------------------------------------",
    ];

    public static (string Content, string HintName) Generate(in BasicQueryToGenerate basicQueryToGenerate)
    {
        var sb = new StringBuilder(4 * 1024);
        foreach (var header in Header)
        {
            sb.AppendLine(header);
        }
        sb.AppendLine();
        sb.AppendLine($"using Microsoft.EntityFrameworkCore;");
        sb.AppendLine($"using Ww.Winter;");
        sb.AppendLine();
        sb.AppendLine($"#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {basicQueryToGenerate.Namespace};");
        sb.AppendLine();
        sb.AppendLine($"public partial class {basicQueryToGenerate.ClassName}");
        sb.AppendLine("{");
        foreach (var query in basicQueryToGenerate.Queries)
        {
            var entityQuery = new BasicEntityQueryIdentifierParser().Parse(query.Entity, query.MethodName);
            if (entityQuery is not null)
            {
                sb.AppendLine($"    public async Task<{query.Entity.TypeName}> {query.MethodName}(");
                foreach (var prop in entityQuery.FilterProperties)
                {
                    sb.AppendLine($"        {prop.Property.PropertyType.TypeName}? {ToCamelCase(prop.Property.PropertyName)},");
                }
                sb.AppendLine("        CancellationToken cancellationToken)");
                sb.AppendLine("    {");
                sb.AppendLine($"        var query = this.dbContext.{query.Entity.TypeName}s");
                sb.AppendLine($"            .AsNoTracking()");
                sb.AppendLine($"            .TagWith(\"{query.MethodName}\");");
                sb.AppendLine();
                foreach (var prop in entityQuery.FilterProperties)
                {
                    sb.AppendLine($"        if ({ToCamelCase(prop.Property.PropertyName)} is not null)");
                    sb.AppendLine("        {");
                    sb.AppendLine($"            query = query.Where(e => e.{prop.Property.PropertyName} == {ToCamelCase(prop.Property.PropertyName)});");
                    sb.AppendLine("        }");
                }
                sb.AppendLine();
                sb.AppendLine($"        var result = await query.SingleOrDefaultAsync(cancellationToken);");
                sb.AppendLine($"        if (result is null)");
                sb.AppendLine("        {");
                sb.AppendLine($"            throw new NotFoundEntityException(\"{query.Entity.TypeName}\", \"Id lookup failure\");");
                sb.AppendLine("        }");
                sb.AppendLine($"        return result;");
                sb.AppendLine("    }");
            }
        }
        sb.AppendLine("}");

        var content = sb.ToString();

        var filename = $"{basicQueryToGenerate.FullyQualifiedClassName}_BasicQueries.g.cs".Replace('<', '_')
            .Replace('>', '_')
            .Replace(',', '.')
            .Replace(' ', '_');

        return (content, filename);
    }
    private static string ToCamelCase(string value)
    {
        if (string.IsNullOrEmpty(value) || char.IsLower(value[0]))
        {
            return value;
        }
        if (value.Length == 1)
        {
            return value.ToLowerInvariant();
        }
        return char.ToLowerInvariant(value[0]) + value.Substring(1);
    }
}