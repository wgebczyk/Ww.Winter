using System.Collections.Generic;
using System.Text;

namespace Ww.Winter.Generator.Queries;

public static class QueryRenderer
{
    private static readonly string[] Header =
    [
        "//---------------------------------------------------------------------------------------------------",
        "// <auto-generated>",
        "//     This code was generated by the Ww.Winter source generator.",
        "//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
        "// </auto-generated>",
        "//---------------------------------------------------------------------------------------------------",
    ];

    public static (string Content, string HintName) Render(QueryToGenerate queryToGenerate)
    {
        var sb = new StringBuilder(4 * 1024);
        foreach (var header in Header)
        {
            sb.AppendLine(header);
        }
        sb.AppendLine();
        sb.AppendLine($"using System.Linq.Expressions;");
        sb.AppendLine($"using Microsoft.EntityFrameworkCore;");
        sb.AppendLine();
        sb.AppendLine($"#nullable enable");
        sb.AppendLine();
        sb.AppendLine($"namespace {queryToGenerate.OwnedBy.Namespace};");
        sb.AppendLine();
        sb.AppendLine($"public partial class {queryToGenerate.OwnedBy.TypeName}");
        sb.AppendLine($"{{");
        foreach (var query in queryToGenerate.Queries)
        {
            var filterParamName = query.FilterParamName;
            sb.AppendLine($"    public partial async Task<IList<{query.Entity.TypeName}>> {query.MethodName}(");
            sb.AppendLine($"        {query.FilterType.TypeName} {filterParamName},");
            sb.AppendLine($"        SortParams {query.SortParamName},");
            sb.AppendLine($"        PaginationParams {query.PaginationParamName},");
            sb.AppendLine($"        CancellationToken cancellationToken)");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        var query = this.dbContext.{query.Entity.TypeName}s");
            sb.AppendLine($"            .AsNoTracking()");
            sb.AppendLine($"            .TagWith(\"{query.MethodName}\");");
            sb.AppendLine();
            foreach (var prop in query.FilterType.Properties)
            {
                var filterProperty = new QueryPropertyIdentifierParser().Parse(query.Entity, prop);
                if (filterProperty is null)
                {
                    sb.AppendLine($"        // WARN: Unable to process filter property '{prop.PropertyName}' for entity '{query.Entity.TypeName}'");
                    continue;
                }
                var entityProperty = filterProperty.Property.PropertyName;

                sb.AppendLine($"        if ({filterParamName}.{prop.PropertyName} is not null)");
                sb.AppendLine($"        {{");
                switch (filterProperty!.Comparison)
                {
                    case FilterComparison.Equals:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} == {filterParamName}.{prop.PropertyName});");
                        break;
                    case FilterComparison.NotEquals:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} != {filterParamName}.{prop.PropertyName});");
                        break;
                    case FilterComparison.GreaterThan:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} > {filterParamName}.{prop.PropertyName});");
                        break;
                    case FilterComparison.GreaterThanOrEqual:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} >= {filterParamName}.{prop.PropertyName});");
                        break;
                    case FilterComparison.LessThan:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} < {filterParamName}.{prop.PropertyName});");
                        break;
                    case FilterComparison.LessThanOrEqual:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty} <= {filterParamName}.{prop.PropertyName});");
                        break;
                    case FilterComparison.Contains:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.Contains({filterParamName}.{prop.PropertyName}));");
                        break;
                    case FilterComparison.StartsWith:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.StartsWith({filterParamName}.{prop.PropertyName}));");
                        break;
                    case FilterComparison.EndsWith:
                        sb.AppendLine($"            query = query.Where(e => e.{entityProperty}.EndsWith({filterParamName}.{prop.PropertyName}));");
                        break;
                }
                sb.AppendLine($"        }}");
            }
            sb.AppendLine();
            sb.AppendLine($"        query = ApplySort(query, {query.SortParamName});");
            sb.AppendLine($"        query = ApplyPagination(query, {query.PaginationParamName});");
            sb.AppendLine();
            sb.AppendLine($"        return await query.ToListAsync(cancellationToken);");
            sb.AppendLine($"    }}");
            sb.AppendLine();
        }

        var generatedEntities = new HashSet<string>();
        foreach (var query in queryToGenerate.Queries)
        {
            var entity = query.Entity;
            if (!generatedEntities.Add(entity.FullyQualifiedTypeName))
            {
                continue;
            }

            sb.AppendLine();
            sb.AppendLine($"    private IQueryable<{entity.TypeName}> ApplySort(IQueryable<{entity.TypeName}> query, SortParams sort)");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        if (sort.Properties.Count == 0)");
            sb.AppendLine($"        {{");
            sb.AppendLine($"            return query;");
            sb.AppendLine($"        }}");
            sb.AppendLine();
            sb.AppendLine($"        foreach (var property in sort.Properties)");
            sb.AppendLine($"        {{");
            sb.AppendLine($"            var propertyName = property.PropertyName.ToLowerInvariant();");
            sb.AppendLine($"            var direction = property.Direction;");
            sb.AppendLine($"            switch (propertyName)");
            sb.AppendLine($"            {{");
            foreach (var entityProperty in entity.Properties)
            {
                sb.AppendLine($"                case \"{entityProperty.PropertyName.ToLowerInvariant()}\":");
                sb.AppendLine($"                    query = ApplySort(query, o => o.{entityProperty.PropertyName}, direction == System.ComponentModel.ListSortDirection.Descending);");
                sb.AppendLine($"                    break;");
            }
            sb.AppendLine($"            }}");
            sb.AppendLine($"        }}");
            sb.AppendLine($"        return query;");
            sb.AppendLine($"    }}");
            sb.AppendLine();
            sb.AppendLine($"    private static IOrderedQueryable<T> ApplySort<T, TKey>(");
            sb.AppendLine($"        IQueryable<T> source,");
            sb.AppendLine($"        Expression<Func<T, TKey>> keySelector,");
            sb.AppendLine($"        bool descending)");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        if (source is not IOrderedQueryable<T> ordered)");
            sb.AppendLine($"        {{");
            sb.AppendLine($"            return descending ? source.OrderByDescending(keySelector)");
            sb.AppendLine($"                              : source.OrderBy(keySelector);");
            sb.AppendLine($"        }}");
            sb.AppendLine($"        return descending ? ordered.ThenByDescending(keySelector)");
            sb.AppendLine($"                          : ordered.ThenBy(keySelector);");
            sb.AppendLine($"    }}");
            sb.AppendLine();
            sb.AppendLine($"    private IQueryable<{entity.TypeName}> ApplyPagination(IQueryable<{entity.TypeName}> query, PaginationParams pagination)");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        if (pagination.IsDefined)");
            sb.AppendLine($"        {{");
            sb.AppendLine($"            return query.Skip(pagination?.Skip ?? 0).Take(pagination?.Take ?? 10);");
            sb.AppendLine($"        }}");
            sb.AppendLine($"        return query;");
            sb.AppendLine($"    }}");
        }
        sb.AppendLine($"}}");

        var content = sb.ToString();

        var filename = $"{queryToGenerate.OwnedBy.FullyQualifiedTypeName}_Queries.g.cs".Replace('<', '_')
            .Replace('>', '_')
            .Replace(',', '.')
            .Replace(' ', '_');

        return (content, filename);
    }
}